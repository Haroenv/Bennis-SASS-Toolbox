// **------------------------------------* \\
// * MIXIN: element() ; modifier()
// **------------------------------------* \\

// fill in the right classes just below the selector (/* .123 */) for simple comparison
$bemDebugClasses: false !default;

/// Set the default separator for **block elements**
/// @type Variable
/// @group Structure Helpers
$bemElementSeparator: '__' !default;

/// Set the default separator for **block elements**
/// @type Variable
/// @group Structure Helpers
$bemModifierSeparator: '--' !default;

/// @access public
/// @group Structure Helpers
///
/// @author [Marc Mintel](https://medium.com/@marcmintel)
/// @link https://gist.github.com/kepek/7b5a4189690d6d73935b
/// @link https://medium.com/@marcmintel/pushing-bem-to-the-next-level-with-sass-3-4-5239d2371321
@function containsModifier( $selector ) {
  $selector: selectorToString( $selector );

  @if str-index( $selector, $bemModifierSeparator ) {
    @return true;
  } @else {
    @return false;
  }
}

/// @access public
/// @group Structure Helpers
///
/// @author [Marc Mintel](https://medium.com/@marcmintel)
/// @link https://gist.github.com/kepek/7b5a4189690d6d73935b
/// @link https://medium.com/@marcmintel/pushing-bem-to-the-next-level-with-sass-3-4-5239d2371321
@function selectorToString($selector) {
  $selector: inspect($selector); //cast to string
  $selector: str-slice($selector, 2, -2); //remove brackets
  @return $selector;
}

/// @access public
/// @group Structure Helpers
///
/// @author [Marc Mintel](https://medium.com/@marcmintel)
/// @link https://gist.github.com/kepek/7b5a4189690d6d73935b
/// @link https://medium.com/@marcmintel/pushing-bem-to-the-next-level-with-sass-3-4-5239d2371321
@function getBlock($selector) {
  $selector: selectorToString($selector);
  $modifierStart: str-index($selector, $bemModifierSeparator) - 1;
  @return str-slice($selector, 0, $modifierStart);
}

/// @access public
/// @group Structure Helpers
///
/// @author [Marc Mintel](https://medium.com/@marcmintel)
/// @link https://gist.github.com/kepek/7b5a4189690d6d73935b
/// @link https://medium.com/@marcmintel/pushing-bem-to-the-next-level-with-sass-3-4-5239d2371321
@mixin b($block) {
  .#{$block} {
    @content;
  }
}

/// Block Element
/// @access public
/// @group Structure Helpers
///
/// @author Original: [Marc Mintel](https://medium.com/@marcmintel)
/// @link https://gist.github.com/kepek/7b5a4189690d6d73935b
/// @link https://medium.com/@marcmintel/pushing-bem-to-the-next-level-with-sass-3-4-5239d2371321
///
/// @todo
///    * Fix nesting in hover eg: `.bem-test:hover .bem-test--M11` should be `.bem-test--M11.bem-test:hover`
///    * Fix deep nesting in hover eg: `.bem-test:hover .bem-test--M11 .bem-test__E11 .bem-test__E21` should be `.bem-test--M11.bem-test:hover .bem-test__E11__E21`
///
/// @param {String} $element - Elements name
///
/// @example scss - Usage
///  .block {
///    /* CSS declarations for `.block` */
///    @include element('element') {
///       /* CSS declarations for `.block__element` */
///    }
///  }
///
/// @example css - CSS output
///  .block {
///    /* CSS declarations for `.block` */
///    .block__element {
///       /* CSS declarations for `.block__element` */
///    }
///  }
@mixin element($element) {
  $parent:            &;
  $parentString:      selectorToString( $parent );
  $parentLast:        nth( $parent, length($parent) );
  $parentLastString:  selectorToString( $parentLast );
  $parentIsModifier:  str-index( $parentString, $bemModifierSeparator );
  $parentIsHover:     str-index( $parentString , hover );
  $parentIsNested:    str-index( $parentLastString , " " );

  @at-root {

    @if $parentIsModifier and $parentIsHover and $parentIsNested {
//      @for $i from 1 through length($parentLast) {
//        $spaceAt: str-index( $parentLastString , " " );
//        $parentLastString: str-slice($parentLastString, 0, $spaceAt);
//      }

      #{$parentLast+$bemElementSeparator+$element} {
        @if $bemDebugClasses {
          /* is $parentIsModifier + is $parentIsHover + is $parentIsNested */
          /* #{&} - generated */
        }
        @content;
      }

    } @else if $parentIsModifier and $parentIsHover and not $parentIsNested {

      $modStart: str-index($parentString, $bemModifierSeparator) - 2;
      $block: str-slice($parentLastString, 0 , $modStart);

      & .#{$block+$bemElementSeparator+$element} {
        @if $bemDebugClasses {
          /* is $parentIsModifier + is $parentIsHover + NOT $parentIsNested */
          /* #{&} - generated */
        }
        @content;
      }
    } @else if $parentIsModifier and not $parentIsHover and not $parentIsNested {

      $block: getParentBlock( $parentString);

      & .#{$block+$bemElementSeparator+$element} {
        @if $bemDebugClasses {
          /* #{&} - generated */
          /* is $parentIsModifier + NOT $parentIsHover + NOT $parentIsNested */
        }
        @content;
      }

    } @else if not $parentIsModifier and $parentIsHover and not $parentIsNested {

      $myParentBlock: str-slice(nth($parentLast, 1), 1, -7); // slice up "hover"

      & #{$myParentBlock+$bemElementSeparator+$element}{
        @if $bemDebugClasses {
          /* NOT $parentIsModifier + is $parentIsHover + NOT $parentIsNested */
          /* #{&} - generated */
        }
        @content;
      }

    } @else if not $parentIsModifier and $parentIsHover and $parentIsNested {

      &#{$bemElementSeparator+$element} {
        @if $bemDebugClasses {
          /* NOT $parentIsModifier + is $parentIsHover + is $parentIsNested */
          /* #{&} - generated */
        }
        @content;
      }

    } @else if not $parentIsModifier and not $parentIsHover and $parentIsNested {

      &#{$bemElementSeparator+$element} {
        @if $bemDebugClasses {
          /* #{&} ?? */
          /* NOT $parentIsModifier + NOT $parentIsHover + is $parentIsNested */
        }
        @content;
      }

    } @else {

      &#{$bemElementSeparator+$element} {
        @if $bemDebugClasses {
          /* NOT $parentIsModifier + NOT $parentIsHover */
          /* #{&} - generated */
        }
        @content;
      }

    }
  }
}

/// @alias element
@mixin e($element) {
  @include element($element)  {
    @content;
  }
}

/// Block Modifier
/// @access public
/// @group Structure Helpers
///
/// @author [Marc Mintel](https://medium.com/@marcmintel)
/// @link https://gist.github.com/kepek/7b5a4189690d6d73935b
/// @link https://medium.com/@marcmintel/pushing-bem-to-the-next-level-with-sass-3-4-5239d2371321
///
/// @param {String} $modifier - Modifiers name
///
/// @example scss - Usage
///  .block {
///    /* CSS declarations for `.block` */
///    @include modifier('modifier') {
///       /* CSS declarations for `.block--modifier */
///    }
///  }
///
/// @example css - CSS output
///  .block {
///    /* CSS declarations for `.block` */
///    .block--modifier {
///       /* CSS declarations for `.block--modifier */
///    }
///  }
@mixin modifier($modifier) {

  $myParentBlock: &;
  $myParentBlockLast: nth( $myParentBlock, length($myParentBlock) );
  $isHover:  str-index( selectorToString($myParentBlock) , hover ); // NULL or NUMBER
  $isModifier: str-index( selectorToString($myParentBlock) , $bemModifierSeparator ); // NULL or NUMBER
  $isNested: str-index( selectorToString($myParentBlock) , " " ); // NULL or NUMBER -- Mod or Hover
  @at-root {
    @if $isNested {
      $myParent: str-slice( selectorToString($myParentBlock), 2, -8);
      /* MOD-isNested */
      &#{$bemModifierSeparator+$modifier} {
        @if $bemDebugClasses { /* #{&} */ }
        @content;
      }

    } @else if $isHover {
      $myParent: str-slice( selectorToString($myParentBlock), 2, -8);

      /* MOD-isHover */
      .#{$myParent}#{$bemModifierSeparator+$modifier}:hover {
        @if $bemDebugClasses { /* #{&} PETERPAN */ }
        @content;
      }
    } @else if $isHover and $isModifier {
      .isHover-isModifier {
        @if $bemDebugClasses { /* #{&} */ }
        @content;
      }
    } @else {

      /* MOD-TopLevel*/
      &#{$bemModifierSeparator+$modifier}  {
        @if $bemDebugClasses { /* #{&} */ }
        @content;
      }
    }
  }
}

/// @alias modifier
@mixin m($modifier) {
  @include modifier($modifier)  {
    @content;
  }
}
